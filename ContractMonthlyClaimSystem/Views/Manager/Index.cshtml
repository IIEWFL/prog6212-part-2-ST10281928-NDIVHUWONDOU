@model IEnumerable<ContractMonthlyClaimSystem.Models.Claim>
@using System.Linq

@{
    ViewData["Title"] = "Claims";
    var items = Model ?? Enumerable.Empty<ContractMonthlyClaimSystem.Models.Claim>();

    var totalClaims = items.Count();
    var totalHours = items.Sum(x => x.HoursWorked);
    var avgRate = items.Any() ? items.Average(x => x.HourlyRate) : 0.0;


    string StatusClass(string s)
    {
        if (string.IsNullOrWhiteSpace(s)) return "badge-pending";
        switch (s.Trim().ToLowerInvariant())
        {
            case "approved": return "badge-approved";
            case "rejected": return "badge-rejected";
            case "accessed": return "badge-approved";
            default: return "badge-pending";
        }
    }
}

<section class="mb-3">
    <div class="d-flex flex-wrap justify-content-between align-items-end gap-2">
        <div>
            <h1 class="fw-semibold mb-1">Claims</h1>
            <div class="text-muted">Track and review all submitted claims at a glance.</div>
        </div>
        <div class="d-flex gap-2 flex-wrap">
            <a asp-controller="Home" asp-action="Index" class="btn btn-soft">
                <i class="bi bi-house-door"></i> Home
            </a>
        </div>
    </div>
</section>

<div class="row g-3 mb-3">
    <div class="col-md-4">
        <div class="soft-card p-3">
            <div class="text-muted small">Total Claims</div>
            <div class="d-flex align-items-center gap-2">
                <i class="bi bi-list-ul"></i><div class="fs-5 fw-semibold">@totalClaims</div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="soft-card p-3">
            <div class="text-muted small">Total Hours</div>
            <div class="d-flex align-items-center gap-2">
                <i class="bi bi-clock-history"></i><div class="fs-5 fw-semibold">@totalHours</div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="soft-card p-3">
            <div class="text-muted small">Average Rate</div>
            <div class="d-flex align-items-center gap-2">
                <i class="bi bi-currency-dollar"></i><div class="fs-5 fw-semibold">@avgRate.ToString("0.##")</div>
            </div>
        </div>
    </div>
</div>

<div class="soft-card p-3 mb-3">
    <div class="d-flex flex-wrap align-items-center gap-2">
        <div class="flex-grow-1">
            <input id="searchInput" type="search" class="form-control" placeholder="Search lecturer, module, status…" />
        </div>
        <div class="d-flex flex-wrap gap-2">
            <button class="chip active" data-status="all">All</button>
            <button class="chip" data-status="pending">Pending</button>
            <button class="chip" data-status="approved">Approved</button>
            <button class="chip" data-status="rejected">Rejected</button>
            <button class="chip" data-status="accessed">Accessed</button>
        </div>
    </div>
</div>

<div class="table-container">
    <table class="table table-hover align-middle mb-0" id="claimsTable">
        <thead>
            <tr>
                <th>Lecturer Name</th>
                <th>Module</th>
                <th class="text-end">Hours</th>
                <th class="text-end">Rate</th>
                <th>Status</th>
                <th>Co-ord Status</th>
                <th>Manager Status</th>
                <th>Document</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in items)
            {
                <tr data-status="@item.Status?.ToLowerInvariant()">
                    <td>@item.LecturerName</td>
                    <td>@item.Module</td>
                    <td class="text-end">@item.HoursWorked</td>
                    <td class="text-end">@item.HourlyRate</td>
                    <td><span class="badge-status @(StatusClass(item.Status))">@item.Status</span>
                        @if (!string.IsNullOrWhiteSpace(item.reasonCoord) || !string.IsNullOrWhiteSpace(item.reasonManager))
                        {
                            <div class="text-secondary small fst-italic mt-1">
                                @if (!string.IsNullOrWhiteSpace(item.reasonCoord))
                                {
                                    <span><b>Coordinator:</b> @item.reasonCoord</span>
                        
                                    <br />
                                }
                                @if (!string.IsNullOrWhiteSpace(item.reasonManager))
                                {
                                    <span><b>Manager:</b> @item.reasonManager</span>
                                }
                            </div>
                        }

                    </td>
                    <td><span class="badge-status @(StatusClass(item.statusCoord))">@item.statusCoord</span></td>
                    <td><span class="badge-status @(StatusClass(item.statusManager))">@item.statusManager</span></td>
                    <td>
                        @if (!string.IsNullOrWhiteSpace(item.DocumentPath))
                        {
                            <a href="@Url.Content(item.DocumentPath)">View</a>
                        }
                        else
                        {

                            <span class="text-muted">No File</span>
                        }
                    </td>
                    <td>
                        <form asp-action="UpdateStatus" asp-route-id="@item.Id" method="post" onsubmit="return confirmReject(this);">
                            <input type="hidden" name="status" value="Rejected" />
                            <input type="hidden" name="reason" />
                            <button type="submit" class="btn btn-danger">Reject</button>
                        </form>


                        <form asp-action="UpdateStatus" asp-route-id="@item.Id" method="post" class="mt-2">
                            <input type="hidden" name="status" value="Approved" />
                            <button type="submit" class="btn btn-success">Approve</button>
                        </form>
                    </td>


                </tr>
            }
        </tbody>
    </table>
</div>

<div id="emptyState" class="text-center text-muted py-5 d-none">
    <i class="bi bi-search fs-3 d-block mb-2"></i>
    <div>No matching claims.</div>
</div>

@section Scripts {
    <script>
        (function(){
          const chips = document.querySelectorAll(".chip");
          const search = document.getElementById("searchInput");
          const rows  = Array.from(document.querySelectorAll("#claimsTable tbody tr"));
          const empty = document.getElementById("emptyState");
          let filterStatus = "all";

          const apply = () => {
            const q = (search.value || "").toLowerCase().trim();
            let any = 0;
            rows.forEach(tr => {
              const status = (tr.getAttribute("data-status") || "").toLowerCase();
              const text = tr.textContent.toLowerCase();
              const statusOk = (filterStatus === "all") || (status === filterStatus);
              const searchOk = q === "" || text.indexOf(q) !== -1;
              const show = statusOk && searchOk;
              tr.style.display = show ? "" : "none";
              if (show) any++;
            });
            empty.classList.toggle("d-none", any !== 0);
          };

          chips.forEach(c => c.addEventListener("click", () => {
            chips.forEach(x => x.classList.remove("active"));
            c.classList.add("active");
            filterStatus = c.getAttribute("data-status");
            apply();
          }));
          search.addEventListener("input", apply);
        })();

                function confirmReject(form) {
            const reason = prompt("Please provide a reason for rejection:");
            if (reason === null) return false; // cancel
            form.querySelector('input[name="reason"]').value = reason;
            return true;
        }
    </script>
}

